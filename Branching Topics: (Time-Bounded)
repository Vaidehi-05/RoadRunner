/*Enter a Topic and Total Time Constraint(hrs)=> Get Topics which can be done within the time constraint*/ 
#include <bits/stdc++.h>

using namespace std;

struct StackNode
{
    string gname;
    int nodeVal;
    vector<string> path;
    int totImportance;
    int totTime;
    map<string, bool> vis;
    //int diff; //variable constraints! 
};

void printSubgraph(string node,
                       map<string, vector<pair<string, pair<int, int>>>> &branches,
                       int timeConstraint,
                       string indent = "", bool isLast = true,
                       pair<int, int> edgeInfo = {-1, -1},
                       unordered_set<string> &visited = *(new unordered_set<string>()),
                       int timeSpent = 0)
    {
        // If the current time spent exceeds the constraint, stop
        if (timeSpent > timeConstraint)
        {
            return;
        }

        // Check if we can print the current node with the edge time
        int newTimeSpent = timeSpent + edgeInfo.first;
        if (newTimeSpent > timeConstraint)
        {
            return; // Don't print and stop recursion if we exceed the time constraint
        }

        if (visited.count(node))
            return;
        visited.insert(node);

        // Print current node
        cout << indent;
        if (!indent.empty())
        {
            cout << (isLast ? "└── " : "├── ");
        }

        cout << node;
        if (edgeInfo.first != -1)
        {
            cout << " (Time: " << edgeInfo.first << ", Diff: " << edgeInfo.second << ")";
        }
        cout << endl;

        // Prepare indentation for next level
        indent += (isLast ? "    " : "│   ");

        // Recurse for all children, updating timeSpent
        auto &children = branches[node];
        for (size_t i = 0; i < children.size(); ++i)
        {
            auto &[child, weight] = children[i];
            bool childIsLast = (i == children.size() - 1);

            // Add the edge time to timeSpent for next level
            printSubgraph(child, branches, timeConstraint, indent, childIsLast, weight, visited, newTimeSpent);
        }
    }
/* =============================================
     DISPLAY FORMAT:
    Arrays
    ├── Sorting (Time: 5, Diff: 2)
    │   ├── Merge Sort (Time: 7, Diff: 3)
    │   └── Quick Sort (Time: 6, Diff: 4)
    └── Searching (Time: 4, Diff: 2)
        └── Binary Search (Time: 6, Diff: 3) 
================================================*/


void topicsPossibleInTime(string startNode, int timeConstraint, map<string, int> &present_skillset)
    {

        int nodeVal;
        string gname;
        // can create a function
        for (auto [graphName, graph] : uni_map) // finding the startNode's(GraphName & NodeIndex) by traverse the whole Graph
        {
            if (graph.node_ind.find(startNode) != graph.node_ind.end())
            {
                gname = graphName;
                nodeVal = graph.node_ind[startNode];
                break;
            }
        }

        stack<StackNode> st; //{GraphName, NodeIndex, PathTraversed, totImp, totTime, NodesVisited}

        set<string> reachableNodes;                               // stores all nodes reachable from startNode(under Constraint)
        map<pair<string, string>, pair<int, int>> reachableEdges; //<<node, node's_neighbour><Time, Difficulty>>
        // int maxImportance=0;
        int totalTimeUsed = 0;
        set<pair<string, string>> usedEdges;

        Graph a = uni_map[gname];
        st.push({gname, nodeVal, {startNode}, a.outDegree[a.node_name[nodeVal]].first, 0});
        // map<string, bool> vis;
        vector<vector<string>> allPaths;
        while (!st.empty())
        {
            int c = 0;
            StackNode curStack = st.top();
            Graph a = uni_map[curStack.gname];
            int b = curStack.nodeVal;
            string curNode = a.node_name[b];
            int edgeTime, edgeDiff;

            st.pop();

            reachableNodes.insert(curNode);
            for (string &node : curStack.path)
                reachableNodes.insert(node);

            if (curStack.totTime > timeConstraint)
                continue; // skip if exceedign totalTime

            //        if(curStack.vis[curNode]) continue;
            //        curStack.vis[curNode]=true;

            allPaths.push_back(curStack.path);

            for (int i = 0; i < a.adjMat.size(); i++) // Check if it is an endNode(leading to another mainTopic)
                if (a.adjMat[b][i].second != 0)
                    c++;

            if (c == 0 && uni_map.find(curNode) != uni_map.end()) // if yes, find in uni_map, insert its children in stack(update the newTotTime, newTotImp beforehand, taking consideration present_skillset), reachableNodes, reachableEdges;
            {
                Graph a_new = uni_map[curNode];
                b = a_new.node_ind[curNode];
                for (int i = 0; i < a_new.adjMat.size(); i++)
                    if (a_new.adjMat[b][i].second != 0 && !curStack.vis[a_new.node_name[i]]) // if(edge exists & notVisited)
                    {
                        int edgeTime = curStack.totTime;
                        int importance = curStack.totImportance;

                        bool isCompleted = present_skillset.count(a_new.node_name[i]); // update curStackNode.Time&Imp if userNotCompletedTopic
                        if (!isCompleted)
                        {
                            edgeTime += a_new.adjMat[b][i].first;
                            importance += a_new.outDegree[a_new.node_name[i]].first;
                        }
                        pair<string, string> edgeKey = {curNode, a_new.node_name[i]};
                        int edgeTimeToAdd = a_new.adjMat[b][i].first;

                        if (usedEdges.find(edgeKey) == usedEdges.end() && curStack.totTime + edgeTimeToAdd <= timeConstraint)
                        {
                            curStack.totTime += edgeTimeToAdd;
                            usedEdges.insert(edgeKey);
                            vector<string> newPath = curStack.path;
                            map<string, bool> newVis = curStack.vis;
                            newPath.push_back(a_new.node_name[i]);
                            newVis[a_new.node_name[i]] = true;

                            st.push({a_new.name_of_graph, i, newPath, importance, edgeTime, newVis});

                            reachableNodes.insert(curNode);
                            reachableNodes.insert(a_new.node_name[i]);
                            reachableEdges[{curNode, a_new.node_name[i]}] = a_new.adjMat[b][i];
                        }
                    }
                continue;
            }

            for (int i = 0; i < a.adjMat.size(); i++)
            {
                if (a.adjMat[b][i].second != 0 && !curStack.vis[a.node_name[i]]) // if(edge exists & notVisited)
                {
                    {
                        int edgeTime = curStack.totTime;
                        int importance = curStack.totImportance;

                        bool isCompleted = present_skillset.count(a.node_name[i]); // update curStackNode.Time&Imp if userNotCompletedTopic
                        if (!isCompleted)
                        {
                            edgeTime += a.adjMat[b][i].first;
                            importance += a.outDegree[a.node_name[i]].first;
                        }
                        pair<string, string> edgeKey = {curNode, a.node_name[i]};
                        int edgeTimeToAdd = a.adjMat[b][i].first;

                        if (usedEdges.find(edgeKey) == usedEdges.end() && curStack.totTime + edgeTimeToAdd <= timeConstraint)
                        {
                            curStack.totTime += edgeTimeToAdd;
                            usedEdges.insert(edgeKey);
                            vector<string> newPath = curStack.path;
                            map<string, bool> newVis = curStack.vis;
                            newPath.push_back(a.node_name[i]);
                            newVis[a.node_name[i]] = true;
                            st.push({a.name_of_graph, i, newPath, importance, edgeTime, newVis});

                            reachableNodes.insert(curNode);
                            reachableNodes.insert(a.node_name[i]);
                            reachableEdges[{curNode, a.node_name[i]}] = a.adjMat[b][i];
                        }
                    }
                }
            }
        }

        map<string, vector<pair<string, pair<int, int>>>> branches; // displayFormat
        for (auto e : reachableEdges)
        {
            string a = e.first.first;
            string b = e.first.second;
            branches[a].push_back({b, e.second});
        }

        cout << "Visual Tree:" << endl;
        printSubgraph(startNode, branches, timeConstraint);

        // vector<string> topics; // use reachableNodes instead;
        // for(auto a: vis)
        //     topics.push_back(a.first);
    }
